#!/bin/bash

### BEGIN INIT INFO
# Provides:             osmode_mgmt
# Required-Start:       napatech3
# Required-Stop:        napatech3
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Napatech Virtual Interface
### END INIT INFO

DAEMON=automatic_summarizer
PIDFILE=/var/run/$DAEMON.pid
DAEMON_PATH=/opt/automatic_summarizer/

if [ `id -u` -ne 0 ]; then
    echo "You need root privileges to run this script"
    exit 1
fi

case "$1" in
start)
    if [ -s $PIDFILE ]; then
        PID=`cat $PIDFILE`
        if [ -d /proc/${PID} ]; then
            echo "Service $DAEMON already running"
            exit
        fi
    fi

    printf "%-50s" "Starting $DAEMON"

    python ${DAEMON_PATH}manage.py makemigrations
    python ${DAEMON_PATH}manage.py migrate
    sudo nohup python ${DAEMON_PATH}manage.py runserver > /dev/null 2>&1 &

    echo "."

    PID=`pidof runserver`
    if [ -z ${PID} ]; then
        echo "Failed."
        exit 1
    fi

    echo $PID > $PIDFILE
    echo "Started"
;;
status)
    printf "%-50s" "Checking $DAEMON..."
    if [ -s $PIDFILE ]; then
        PID=`cat $PIDFILE`
        if [ ! -d /proc/${PID} ]; then
            printf "%s\n" "Process dead but pidfile exists"
            rm -f $PIDFILE
            exit 1
        else
            echo "Running"
        fi
    else
        printf "%s\n" "Service not running"
        exit 1
    fi
;;
stop)
    printf "%-50s" "Stopping $DAEMON"

    if [ -s $PIDFILE ]; then
        attempt=0
        PID=`cat $PIDFILE`
        until [ ! $attempt -le 15 ]; do
            if [[ ! -d /proc/${PID} || -z ${PID} ]]; then
                rm -f $PIDFILE
                break
            else
                kill -s SIGINT $PID
                echo "."
                sleep 1
            fi
            attempt=`expr $attempt + 1`
            if [ $attempt -eq 5 ]; then
                printf "%s\n" "Attempting to stop. If it's not possible, the service will be forcibly interrupted in 20 seconds"
            fi
        done

        if [ ! -d /proc/${PID} ]; then
            printf "%s\n" "Ok Stopped"
        else
            printf "%s\n" "Could not Stop"
            printf "%s\n" "Sending SIGTERM"
            kill -s SIGTERM $PID
            rm -f $PIDFILE
            printf "%s\n" "Process has been terminated"
        fi
    else
        printf "%s\n" "pidfile not found"
    fi
;;

restart)
    $0 stop
    $0 start
;;

*)
    echo "Usage: $0 {status|start|stop|restart}"
    exit 1
esac

